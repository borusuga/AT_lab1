# ex: set ro:
# DO NOT EDIT.
# generated by smc (http://smc.sourceforge.net/)
# from file : Lab1.sm

from utils import statemap


class ParseSMCState(statemap.State):

    def Entry(self, fsm):
        pass

    def Exit(self, fsm):
        pass

    def ClosingBracket(self, fsm):
        self.Default(fsm)

    def Comma(self, fsm):
        self.Default(fsm)

    def Digit(self, fsm):
        self.Default(fsm)

    def EOS(self, fsm):
        self.Default(fsm)

    def Letter(self, fsm):
        self.Default(fsm)

    def Letter_G(self, fsm):
        self.Default(fsm)

    def Letter_H(self, fsm):
        self.Default(fsm)

    def Letter_I(self, fsm):
        self.Default(fsm)

    def Letter_L(self, fsm):
        self.Default(fsm)

    def Letter_N(self, fsm):
        self.Default(fsm)

    def Letter_O(self, fsm):
        self.Default(fsm)

    def Letter_R(self, fsm):
        self.Default(fsm)

    def Letter_S(self, fsm):
        self.Default(fsm)

    def Letter_T(self, fsm):
        self.Default(fsm)

    def OpenBracket(self, fsm):
        self.Default(fsm)

    def Space(self, fsm):
        self.Default(fsm)

    def Unknown(self, fsm):
        self.Default(fsm)

    def Default(self, fsm):
        msg = "\n\tState: %s\n\tTransition: %s" % (
            fsm.getState().getName(), fsm.getTransition())
        raise statemap.TransitionUndefinedException(msg)

class Map1_Default(ParseSMCState):

    def Letter_I(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_S(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_L(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_N(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_T(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_H(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_O(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_R(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter_G(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def OpenBracket(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Comma(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def ClosingBracket(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def Unknown(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

    def EOS(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Error)
        fsm.getState().Entry(fsm)

class Map1_Start(Map1_Default):

    def ClosingBracket(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.BRACKET)
        fsm.getState().Entry(fsm)

    def Letter_I(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.I)
        fsm.getState().Entry(fsm)

    def Letter_L(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.L)
        fsm.getState().Entry(fsm)

    def Letter_S(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.S)
        fsm.getState().Entry(fsm)

class Map1_I(Map1_Default):

    def Letter_N(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.IN)
        fsm.getState().Entry(fsm)

class Map1_IN(Map1_Default):

    def Letter_T(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.INT)
        fsm.getState().Entry(fsm)

class Map1_INT(Map1_Default):

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.TYPE)
        fsm.getState().Entry(fsm)

class Map1_S(Map1_Default):

    def Letter_H(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SH)
        fsm.getState().Entry(fsm)

class Map1_SH(Map1_Default):

    def Letter_O(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SHO)
        fsm.getState().Entry(fsm)

class Map1_SHO(Map1_Default):

    def Letter_R(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SHOR)
        fsm.getState().Entry(fsm)

class Map1_SHOR(Map1_Default):

    def Letter_T(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.SHORT)
        fsm.getState().Entry(fsm)

class Map1_SHORT(Map1_Default):

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.TYPE)
        fsm.getState().Entry(fsm)

class Map1_L(Map1_Default):

    def Letter_O(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.LO)
        fsm.getState().Entry(fsm)

class Map1_LO(Map1_Default):

    def Letter_N(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.LON)
        fsm.getState().Entry(fsm)

class Map1_LON(Map1_Default):

    def Letter_G(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.LONG)
        fsm.getState().Entry(fsm)

class Map1_LONG(Map1_Default):

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.TYPE)
        fsm.getState().Entry(fsm)

class Map1_TYPE(Map1_Default):

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_G(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_H(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_I(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_N(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_O(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_R(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_T(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

class Map1_FunctionName(Map1_Default):

    def ClosingBracket(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.BRACKET)
        fsm.getState().Entry(fsm)

    def Comma(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearCounter()
            ctxt.ParCount()
        finally:
            fsm.setState(Map1.SPACE)
            fsm.getState().Entry(fsm)

    def Digit(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_G(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_H(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_I(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_L(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_N(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_O(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_R(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_S(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def Letter_T(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Counter()
        finally:
            fsm.setState(Map1.FunctionName)
            fsm.getState().Entry(fsm)

    def OpenBracket(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.ClearCounter()
            ctxt.Times()
        finally:
            fsm.setState(Map1.Start)
            fsm.getState().Entry(fsm)

class Map1_BRACKET(Map1_Default):

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        fsm.getState().Exit(fsm)
        fsm.clearState()
        try:
            ctxt.Acceptable()
        finally:
            fsm.setState(Map1.OK)
            fsm.getState().Entry(fsm)

class Map1_SPACE(Map1_Default):

    def Space(self, fsm):
        fsm.getState().Exit(fsm)
        fsm.setState(Map1.Start)
        fsm.getState().Entry(fsm)

class Map1_OK(Map1_Default):
    pass

class Map1_Error(Map1_Default):

    def ClosingBracket(self, fsm):
        # No actions.
        pass

    def Comma(self, fsm):
        # No actions.
        pass

    def Digit(self, fsm):
        # No actions.
        pass

    def EOS(self, fsm):
        ctxt = fsm.getOwner()
        endState = fsm.getState()
        fsm.clearState()
        try:
            ctxt.Unacceptable()
        finally:
            fsm.setState(endState)

    def Letter(self, fsm):
        # No actions.
        pass

    def Letter_G(self, fsm):
        # No actions.
        pass

    def Letter_H(self, fsm):
        # No actions.
        pass

    def Letter_I(self, fsm):
        # No actions.
        pass

    def Letter_L(self, fsm):
        # No actions.
        pass

    def Letter_N(self, fsm):
        # No actions.
        pass

    def Letter_O(self, fsm):
        # No actions.
        pass

    def Letter_R(self, fsm):
        # No actions.
        pass

    def Letter_S(self, fsm):
        # No actions.
        pass

    def Letter_T(self, fsm):
        # No actions.
        pass

    def OpenBracket(self, fsm):
        # No actions.
        pass

    def Space(self, fsm):
        # No actions.
        pass

    def Unknown(self, fsm):
        # No actions.
        pass

class Map1(object):

    Start = Map1_Start('Map1.Start', 0)
    I = Map1_I('Map1.I', 1)
    IN = Map1_IN('Map1.IN', 2)
    INT = Map1_INT('Map1.INT', 3)
    S = Map1_S('Map1.S', 4)
    SH = Map1_SH('Map1.SH', 5)
    SHO = Map1_SHO('Map1.SHO', 6)
    SHOR = Map1_SHOR('Map1.SHOR', 7)
    SHORT = Map1_SHORT('Map1.SHORT', 8)
    L = Map1_L('Map1.L', 9)
    LO = Map1_LO('Map1.LO', 10)
    LON = Map1_LON('Map1.LON', 11)
    LONG = Map1_LONG('Map1.LONG', 12)
    TYPE = Map1_TYPE('Map1.TYPE', 13)
    FunctionName = Map1_FunctionName('Map1.FunctionName', 14)
    BRACKET = Map1_BRACKET('Map1.BRACKET', 15)
    SPACE = Map1_SPACE('Map1.SPACE', 16)
    OK = Map1_OK('Map1.OK', 17)
    Error = Map1_Error('Map1.Error', 18)
    Default = Map1_Default('Map1.Default', -1)

class ParseSMC_sm(statemap.FSMContext):

    def __init__(self, owner):
        statemap.FSMContext.__init__(self, Map1.Start)
        self._owner = owner

    def __getattr__(self, attrib):
        def trans_sm(*arglist):
            self._transition = attrib
            getattr(self.getState(), attrib)(self, *arglist)
            self._transition = None
        return trans_sm

    def enterStartState(self):
        self._state.Entry(self)

    def getOwner(self):
        return self._owner

# Local variables:
#  buffer-read-only: t
# End:
